apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: crew-ai-crew
  title: Crew AI Crew Application
  description: A template for deploying a configurable CrewAI Crew with an OpenAI-compatible backend.
  tags: ["ai", "crew-ai", "python"]
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:field: EntityNamePicker
          maxLength: 63
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: user:guest
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
              readonly: false
    - title: Tools Configuration
      properties:
        tools:
          type: array
          title: Tools
          description: "Add one or more MCP tools to be used by agents."
          items:
            type: object
            required: [name, url, transport]
            properties:
              name:
                type: string
                title: Tool Name
                ui:help: "A unique name for this MCP tool server (e.g. backstage_mcp_tools)"
              url:
                type: string
                title: MCP endpoint URL
                ui:help: "e.g. https://tools.example.com/mcp or http://localhost:8001/mcp"
              transport:
                type: string
                title: Type of MCP Transport Protocol
                enum: ["streamable-http", "sse"]
                default: "streamable-http"
              includeTransportSecret:
                title: Is bearer authentication required?
                type: boolean
                default: false
                ui:help: Create a Secret containing the authentication bearer in the preferred targeted Namespace first.
            dependencies:
              includeTransportSecret:
                allOf:
                  - if:
                      properties:
                        includeTransportSecret:
                          const: true
                    then:
                      properties:
                        bearerTokenSecretName:
                          type: string
                          title: Authentication Bearer Token Secret Name
                          ui:help: "The Name of the secret that the Bearer Token is inside."
                        bearerTokenSecretKey:
                          type: string
                          title: Authentication Bearer Token Secret Key
                          ui:help: "The Key of the secret that the Bearer Token value is inside."
                        bearerTokenEnvVarName:
                          type: string
                          title: Bearer Token Env Var Name
                          ui:help: "The name of the bearer token env var."

    - title: Default LLM Configuration
      required:
        - crewAILLMBaseUrl
        - crewAILLMAPIKeySecretName
        - crewAILLMAPIKeySecretKey
        - crewAILLMModelName
      properties:
        crewAILLMBaseUrl:
          title: Default Agent LLM Service URL
          type: string
          ui:help: "The base URL of the Default LLM backend (for example, https://your-model-service.example.com/v1)."
        crewAILLMModelName:
          title: Default Agent LLM Service Model Name
          type: string
          ui:help: "The model name used as default from the crewAI agents."
        crewAILLMAPIKeySecretName:
          title: Default Agent LLM Service API Key Secret Name
          type: string
          ui:help: "The Name of the secret that the Default LLM Backend API Key is inside."
        crewAILLMAPIKeySecretKey:
          title: Default Agent LLM Service API Key Secret Key
          type: string
          ui:help: "The Key of the secret that contains the Default LLM Backend API Key value."

    - title: Agents Configuration
      required:
        - agents
      properties:
        agents:
          type: array
          title: Agents
          ui:help: "Add one or more agents"
          items:
            type: object
            required: [name, role, goal]
            properties:
              name:
                type: string
                title: Agent Name
              role:
                type: string
                title: Agent Role
              goal:
                type: string
                title: Agent Goal
              backstory:
                type: string
                title: Agent Backstory
              tools:
                type: array
                title: Agent Tools
                description: "Select tools from the configured MCP tools."
                items:
                  type: string
                  title: Tool
                  ui:field: SelectFieldFromApi
                  ui:options:
                    title: Select Tool
                    description: Choose a tool from previously configured tools
                    path: tools
                    valueSelector: name
              includeOtherLLM:
                title: Uses different LLM?
                type: boolean
                default: false
                ui:help: Create a Secret containing the llm api key in the preferred targeted Namespace first.
            dependencies:
              includeOtherLLM:
                allOf:
                  - if:
                      properties:
                        includeOtherLLM:
                          const: true
                    then:
                      properties:
                        llmAPIURL:
                          type: string
                          title: LLM API URL
                          ui:help: "The url of the LLM API."
                        llmAPIKeySecretName:
                          type: string
                          title: LLM API Key Secret Name
                          ui:help: "The Name of the secret that the LLM API Key is inside."
                        llmAPIKeySecretKey:
                          type: string
                          title: LLM API Key Secret Key
                          ui:help: "The Key of the secret that the LLM API Key value is inside."
                        llmAPIKeyEnvVarName:
                          type: string
                          title: LLM API Key Env Var Name
                          ui:help: "The name of the LLM API Key env var."

    - title: Tasks Configuration
      required:
        - tasks
      properties:
        tasks:
          type: array
          title: Tasks
          description: "Bind each task to an agent by its name"
          items:
            type: object
            required: [name, description, agent]
            properties:
              name:
                type: string
                title: Task Name
              description:
                type: string
                title: Task Description
              expected_output:
                type: string
                default: "Best possible answer."
                title: Expected Output
              agent:
                type: string
                title: Agent Name
                ui:field: SelectFieldFromApi
                ui:options:
                  title: Select Agent
                  description: Choose an agent from previously configured agents
                  path: agents
                  arraySelector: name
                  valueSelector: name

    - title: Application Repository Information
      required:
        - hostType
        - repoOwner
        - repoName
        - branch
      properties:
        hostType:
          title: Host Type
          type: string
          enum:
            - GitHub
          default: GitHub
        repoOwner:
          title: Repository Owner
          default: ai-rolling-demo
          type: string
          ui:help: The organization, user or project that this repo will belong to
        repoName:
          title: Repository Name
          type: string
        branch:
          title: Repository Default Branch
          type: string
          default: main
      dependencies:
        hostType:
          oneOf:
            - required:
                - githubServer
              properties:
                hostType:
                  const: GitHub
                githubServer:
                  title: Repository Server
                  type: string
                  default: github.com
                  ui:help: "You can also provide the on-prem github server, example: github-github.apps.cluster-ljg9z.sandbox219.opentlc.com"
    - title: Deployment Information
      required:
        - imageRegistry
        - imageOrg
        - imageName
        - namespace
      properties:
        imageRegistry:
          title: Image Registry
          type: string
          description: The image registry host
          default: quay.io
          ui:help: "You can also provide the on-prem registry host, example: quay-tv2pb.apps.cluster-tv2pb.sandbox1194.opentlc.com"
        imageOrg:
          title: Image Organization
          default: rhdhpai-rolling-demo
          type: string
          description: The organization, user or project that this repo will belong to
        imageName:
          title: Image Name
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
        namespace:
          title: Deployment Namespace
          type: string
          default: rhdh-app
          ui:autofocus: true
          ui:options:
            rows: 5
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        targetPath: source
    - id: fetch-skeleton-docs
      name: Fetch Skeleton Techdocs
      action: fetch:template
      input:
        url: ../../skeleton/techdoc
        targetPath: source
        values:
          name: ${{ parameters.name }}
          appSummary: A template for deploying a configurable CrewAI agent with an OpenAI-compatible backend.
          namespace: ${{ parameters.namespace }}
          repoURL: https://${{ parameters.githubServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.githubServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}
          appContainer: ${{ 'quay.io/redhat-ai-dev/ai-template-bootstrap-app:latest' if parameters.hostType === 'GitHub' else 'quay.io/redhat-ai-dev/chatbot:latest' }}
          appPort: 8501
          appRunCommand: "python crew_ai_crew.py"
    # Renders all the template variables into the files and directory names and content, and places the result in the workspace.
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/source-repo
        targetPath: source
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: Secure Supply Chain Example for Chatbot Application
          dockerfile: Containerfile
          buildContext: .
          gitopsSecretName: ${{ 'gitops-auth-secret' }}
          image: "${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}"
          tags: '["ai", "llamacpp", "vllm", "python"]'
          owner: ${{ parameters.owner }}
          repoSlug: "${{ parameters.imageOrg }}/${{ parameters.imageName }}"
          defaultBranch: ${{ parameters.branch }}
          agents: ${{ parameters.agents }}
          tasks: ${{ parameters.tasks }}
          mcpServers: ${{ parameters.tools }}
    - id: fetch-github-action
      name: Fetch GitHub Action
      action: fetch:plain
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        targetPath: source
        url: ../../skeleton/github-action
    - id: publish-github
      name: Publish Repository to GitHub
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        sourcePath: source
        # allowedHosts: ["${{ parameters.githubServer}}"]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: true
        allowAutoMerge: true
        deleteBranchOnMerge: true
        requiredStatusCheckContexts: []
        repoVisibility: "public"
        requiredApprovingReviewCount: 0
    - id: fetch-gitops-skeleton
      name: Fetch Gitops Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/gitops-template
        targetPath: gitops
        values:
          name: ${{ parameters.name }}
          appName: ${{ parameters.name }}-gitops # for now just use the component name, since it's single component app
          description: This is GitOps manifest for ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          rhdhNamespace: rolling-demo-ns
          repoURL: https://${{ parameters.githubServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.githubServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}
          argoComponentOverlays: "./components/${{ parameters.name }}/overlays"
          owner: ${{ parameters.owner }}
          argoNS: openshift-gitops
          argoProject: default
          webhookSecret: pipelines-secret
          webhookSecretKey: webhook.secret
          defaultBranch: main
          appContainer: ${{ 'quay.io/redhat-ai-dev/ai-template-bootstrap-app:latest' if parameters.hostType === 'GitHub' else 'quay.io/redhat-ai-dev/chatbot:latest' }}
          appPort: 8501
          crewAILLMBaseUrl: ${{ parameters.crewAILLMBaseUrl }}
          crewAILLMAPIKeySecretName: ${{ parameters.crewAILLMAPIKeySecretName }}
          crewAILLMAPIKeySecretKey: ${{ parameters.crewAILLMAPIKeySecretKey }}
          crewAILLMModelName: ${{ parameters.crewAILLMModelName }}
          agents: ${{ parameters.agents }}
          tools: ${{ parameters.tools }}
          imageRegistry: ${{ parameters.imageRegistry }}
          imageOrg: ${{ parameters.imageOrg }}
          imageName: ${{ parameters.imageName }}
    - action: fs:rename
      id: renameComponentDir
      name: Rename Component Directory
      input:
        files:
          - from: gitops/components/http
            to: gitops/components/${{ parameters.name }}
            overwrite: true
    - id: publish-github-gitops
      name: Publish GitOps Repository to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        sourcePath: gitops
        # allowedHosts: ["${{ parameters.githubServer }}"]
        description: This is GitOps repository for ${{ parameters.name }}
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: "main"
        protectDefaultBranch: false
        repoVisibility: "public"
    - id: wait-for-github-repository
      name: Waiting for Repository Availability
      action: "debug:wait"
      input:
        seconds: 3
    # SED_APP_SUPPORT_START
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"
    # SED_APP_SUPPORT_END
    - id: register-gitops
      name: Register Gitops
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github-gitops'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-app-of-apps
        # name set in rhdh config
        argoInstance: default
        labelValue: rolling-demo
        namespace: openshift-gitops
        repoUrl: https://${{ parameters.githubServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops.git
        path: "./app-of-apps"
    # SED_APP_SUPPORT_START
    # PR with empty commit
    - id: trigger-build-pr
      name: PR to Trigger Pipeline Build
      action: publish:github:pull-request
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        branchName: trigger-pipeline
        description: "pr to trigger pipeline build"
        title: trigger pipeline build
        sourcePath: source
        targetBranchName: ${{ parameters.branch }}
    # dispatch the workflow to automerge the pr and trigger the pipeline build
    - id: trigger_gh_workflow
      name: Trigger GitHub workflow
      action: github:actions:dispatch
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        branchOrTagName: ${{ parameters.branch }}
        workflowId: automerge.yml
        workflowInputs:
          { pr_url: "${{ steps['trigger-build-pr'].output.remoteUrl }}" }
  # SED_APP_SUPPORT_END

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      # SED_APP_SUPPORT_START
      - title: Source Repository
        url: ${{ steps['publish-github'].output.remoteUrl }}
      # SED_APP_SUPPORT_END
      - title: GitOps Repository
        url: ${{ steps['publish-github-gitops'].output.remoteUrl }}
      # SED_APP_SUPPORT_START
      - title: Open Component in Catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      # SED_APP_SUPPORT_END
      - title: Open GitOps Resource in Catalog
        icon: catalog
        entityRef: ${{ steps['register-gitops'].output.entityRef }}
